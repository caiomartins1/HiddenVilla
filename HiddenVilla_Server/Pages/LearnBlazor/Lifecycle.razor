@page "/lifecycle"
@using System.Threading

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@foreach (var item in EventType)
{
    @item
    <hr />
}

<hr>
@Count <button @onclick="@StartCooldown">Start Cooldown</button>
<hr>

<LifecycleComponent CountValue="@currentCount" />

@code
{
    private int currentCount = 0;

    List<string> EventType = new();

    private int Count { get; set; } = 5;
    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync called");
        await Task.Delay(1000);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync called");
        await Task.Delay(1000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add("OnAfterRender called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync called");

    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender called");
        return true;
    }


    void StartCooldown()
    {
        var timer = new Timer(TimeCallback, null, 1000, 1000);
    }

    void TimeCallback (object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }




}
